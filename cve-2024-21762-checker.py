import socket
import ssl
import sys
import shodan
import os
import warnings
from colorama import init, Fore, Style

init(autoreset=True)
SHODAN_API_KEY = os.getenv('SHODAN_API_KEY')

context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
context.check_hostname = False
context.verify_mode = ssl.CERT_NONE

TIMEOUT = 5

def send_req(host, req):
    try:
        s = socket.create_connection(host, timeout=TIMEOUT)
    except:
        return -1
    try:
        ss = context.wrap_socket(s)
        ss.send(req)
        try:
            return ss.read(2048)
        except socket.timeout:
            return 0
    except Exception as e:
        return str(e)

control_req = """POST /remote/VULNCHECK HTTP/1.1\r
Host: {}\r
Transfer-Encoding: chunked\r
\r
0\r
\r
\r
"""

check_req = """POST /remote/VULNCHECK HTTP/1.1\r
Host: {}\r
Transfer-Encoding: chunked\r
\r
0000000000000000FF\r
\r
"""

def check(host):
    baseurl = "https://{}:{}".format(*host)
    r1 = send_req(host, control_req.format(baseurl).encode())
    if r1 == -1:
        return "Connection Failed"
    if r1 == 0:
        return "Control request failed"
    if b"HTTP/1.1 403 Forbidden" not in r1:
        print("[warning] Server does not look like a Fortinet SSL VPN interface")
    r2 = send_req(host, check_req.format(baseurl).encode())
    if r2 == 0:
        return "Vulnerable"
    else:
        return "Patched"

if __name__ == "__main__":
    try:
# you can change the query below
        query = 'product:"fortigate" port:"10443"'
        api = shodan.Shodan(SHODAN_API_KEY)
        results = api.search(query)
        hosts_info = [(result['ip_str'], result.get('org', 'N/A'), result.get('location', {}).get('country_name', 'N/A')) for result in results['matches']]
    except Exception as e:
        print(f"Error fetching data from Shodan: {e}")
        exit()

    port = 10443

    for host, org, country in hosts_info:
        HOST = (host, port)
        try:
            status = check(HOST)
        except Exception as e:
            status = "skipped"
        if status == "Vulnerable":
            status_text = f"{Fore.RED}{status}{Style.RESET_ALL}"
        elif status == "Patched":
            status_text = f"{Fore.GREEN}{status}{Style.RESET_ALL}"
        else:
            status_text = status
        print(f"{host} | {org} | {country} | {status_text}")

